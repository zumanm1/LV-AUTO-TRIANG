import React, { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import {
  Brain,
  Zap,
  CheckCircle2,
  AlertCircle,
  Settings,
  Play,
  Loader2,
} from "lucide-react";

interface Device {
  name: string;
  ip: string;
  type: string;
}

interface AutomationStep {
  id: string;
  name: string;
  status: "pending" | "running" | "completed" | "failed";
  details: string;
  timestamp?: string;
}

const GenAIAutomation = () => {
  // Mock devices - Cisco 3725 routers
  const devices: Device[] = [
    { name: "Dummy-RT1", ip: "10.255.255.3", type: "Cisco 3725" },
    { name: "Dummy-RT2", ip: "10.255.255.4", type: "Cisco 3725" },
    { name: "Real-RT1", ip: "172.16.39.102", type: "Cisco 3725" },
    { name: "Real-RT2", ip: "172.16.39.103", type: "Cisco 3725" },
  ];

  // State management
  const [networkIntent, setNetworkIntent] = useState(
    'from interface fastethernet0/0 and configure the interface description of "NEW-INT"',
  );
  const [selectedDevice, setSelectedDevice] = useState(
    "Dummy-RT1 (10.255.255.3)",
  );
  const [generatedCommands, setGeneratedCommands] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isValidating, setIsValidating] = useState(false);
  const [isDeploying, setIsDeploying] = useState(false);
  const [automationSteps, setAutomationSteps] = useState<AutomationStep[]>([]);
  const [validationStatus, setValidationStatus] = useState<
    "idle" | "validating" | "success" | "failed"
  >("idle");
  const [deploymentStatus, setDeploymentStatus] = useState<
    "idle" | "deploying" | "success" | "failed"
  >("idle");
  const [errorMessage, setErrorMessage] = useState("");

  // Generate commands using LLM + AI Agent
  const handleGenerateCommands = () => {
    setIsGenerating(true);
    setErrorMessage("");

    // Simulate LLM + AI Agent processing
    setTimeout(() => {
      const commands = `! Generated by AI Network Assistant for Cisco 3725
! Intent: ${networkIntent}
! Target Device: ${selectedDevice}

interface fastethernet0/0
 description NEW-INT
 no shutdown
exit

! Configuration generated successfully
! Validated for Cisco 3725 compatibility`;

      setGeneratedCommands(commands);
      setIsGenerating(false);
    }, 2000);
  };

  // Validate commands using AI Agent
  const handleValidateCommands = () => {
    setIsValidating(true);
    setValidationStatus("validating");
    setErrorMessage("");

    const steps: AutomationStep[] = [
      {
        id: "1",
        name: "Syntax Validation",
        status: "running",
        details: "Checking command syntax for Cisco 3725 compatibility",
      },
      {
        id: "2",
        name: "Device Compatibility",
        status: "pending",
        details: "Verifying commands are supported on target device",
      },
      {
        id: "3",
        name: "Configuration Impact",
        status: "pending",
        details: "Analyzing potential impact on network operations",
      },
      {
        id: "4",
        name: "Security Assessment",
        status: "pending",
        details: "Evaluating security implications of configuration changes",
      },
    ];

    setAutomationSteps(steps);

    // Simulate AI Agent validation process
    let currentStep = 0;
    const interval = setInterval(() => {
      if (currentStep < steps.length) {
        setAutomationSteps((prev) =>
          prev.map((step, index) => {
            if (index === currentStep) {
              return {
                ...step,
                status: "completed",
                timestamp: new Date().toLocaleTimeString(),
              };
            } else if (index === currentStep + 1) {
              return { ...step, status: "running" };
            }
            return step;
          }),
        );
        currentStep++;
      } else {
        clearInterval(interval);
        setIsValidating(false);
        setValidationStatus("success");
      }
    }, 1500);
  };

  // Deploy configuration
  const handleDeployConfiguration = () => {
    setIsDeploying(true);
    setDeploymentStatus("deploying");
    setErrorMessage("");

    // Simulate deployment process
    setTimeout(() => {
      // Simulate random error for demonstration
      if (Math.random() > 0.7) {
        setErrorMessage(
          "Error: An unexpected error occurred during the automation flow.",
        );
        setDeploymentStatus("failed");
      } else {
        setDeploymentStatus("success");
      }
      setIsDeploying(false);
    }, 3000);
  };

  // Reset automation flow
  const handleReset = () => {
    setGeneratedCommands("");
    setAutomationSteps([]);
    setValidationStatus("idle");
    setDeploymentStatus("idle");
    setErrorMessage("");
  };

  return (
    <div className="bg-white">
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">GenAI Network Automation</h1>
        <p className="text-gray-500">
          Transform natural language into validated network commands
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Section */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Brain className="mr-2 h-5 w-5" />
                Network Intent Description
              </CardTitle>
              <CardDescription>
                Describe your network intent in natural language
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label htmlFor="intent" className="text-sm font-medium">
                  Describe your network intent
                </label>
                <Textarea
                  id="intent"
                  placeholder={
                    'from interface fastethernet0/0 and configure the interface description of "NEW-INT"'
                  }
                  value={networkIntent}
                  onChange={(e) => setNetworkIntent(e.target.value)}
                  rows={3}
                />
              </div>

              <div className="space-y-2">
                <label htmlFor="device" className="text-sm font-medium">
                  Select Target Device
                </label>
                <Select
                  value={selectedDevice}
                  onValueChange={setSelectedDevice}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a device" />
                  </SelectTrigger>
                  <SelectContent>
                    {devices.map((device) => (
                      <SelectItem
                        key={device.name}
                        value={`${device.name} (${device.ip})`}
                      >
                        {device.name} ({device.ip}) - {device.type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
            <CardFooter>
              <Button
                onClick={handleGenerateCommands}
                disabled={isGenerating || !networkIntent}
                className="w-full"
              >
                {isGenerating ? (
                  <span className="flex items-center">
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating Commands...
                  </span>
                ) : (
                  <span className="flex items-center">
                    <Zap className="mr-2 h-4 w-4" />
                    Generate Commands
                  </span>
                )}
              </Button>
            </CardFooter>
          </Card>

          {/* Generated Commands */}
          <Card>
            <CardHeader>
              <CardTitle>Generated Commands</CardTitle>
              <CardDescription>
                AI-generated configuration commands
              </CardDescription>
            </CardHeader>
            <CardContent>
              {generatedCommands ? (
                <div className="space-y-4">
                  <div className="p-4 bg-black text-green-400 font-mono text-sm rounded-md overflow-auto max-h-[200px]">
                    <pre>{generatedCommands}</pre>
                  </div>
                  <div className="flex space-x-2">
                    <Button
                      onClick={handleValidateCommands}
                      disabled={isValidating}
                      variant="outline"
                      className="flex-1"
                    >
                      {isValidating ? (
                        <span className="flex items-center">
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Validating...
                        </span>
                      ) : (
                        <span className="flex items-center">
                          <Settings className="mr-2 h-4 w-4" />
                          Validate
                        </span>
                      )}
                    </Button>
                    <Button onClick={handleReset} variant="outline">
                      Reset
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="flex items-center justify-center h-[200px] border rounded-md border-dashed text-gray-400">
                  {errorMessage ||
                    "No commands generated yet. Enter your network intent and click generate."}
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Validation & Deployment Section */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Validation & Deployment</CardTitle>
              <CardDescription>
                {validationStatus === "idle" && "Awaiting validation..."}
                {validationStatus === "validating" &&
                  "Validating configuration..."}
                {validationStatus === "success" &&
                  "Validation completed successfully"}
                {validationStatus === "failed" && "Validation failed"}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Validation Steps */}
              {automationSteps.length > 0 && (
                <div className="space-y-3">
                  {automationSteps.map((step) => (
                    <div key={step.id} className="flex items-start space-x-3">
                      <div className="flex-shrink-0 mt-1">
                        {step.status === "completed" && (
                          <CheckCircle2 className="h-4 w-4 text-green-500" />
                        )}
                        {step.status === "running" && (
                          <Loader2 className="h-4 w-4 text-blue-500 animate-spin" />
                        )}
                        {step.status === "pending" && (
                          <div className="h-4 w-4 rounded-full border-2 border-gray-300" />
                        )}
                        {step.status === "failed" && (
                          <AlertCircle className="h-4 w-4 text-red-500" />
                        )}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center space-x-2">
                          <span className="font-medium text-sm">
                            {step.name}
                          </span>
                          {step.timestamp && (
                            <span className="text-xs text-gray-500">
                              {step.timestamp}
                            </span>
                          )}
                        </div>
                        <p className="text-xs text-gray-600 mt-1">
                          {step.details}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {/* Error Message */}
              {errorMessage && (
                <Alert className="bg-red-50 border-red-200">
                  <AlertCircle className="h-4 w-4 text-red-500" />
                  <AlertDescription className="text-red-700">
                    {errorMessage}
                  </AlertDescription>
                </Alert>
              )}

              {/* Deployment Status */}
              {validationStatus === "success" && (
                <div className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <Badge
                      variant="outline"
                      className="bg-green-50 text-green-700"
                    >
                      Validation Passed
                    </Badge>
                  </div>

                  {deploymentStatus === "deploying" && (
                    <div className="space-y-2">
                      <div className="flex items-center space-x-2">
                        <Loader2 className="h-4 w-4 animate-spin" />
                        <span className="text-sm">
                          Deploying configuration...
                        </span>
                      </div>
                      <Progress value={66} className="h-2" />
                    </div>
                  )}

                  {deploymentStatus === "success" && (
                    <Alert className="bg-green-50 border-green-200">
                      <CheckCircle2 className="h-4 w-4 text-green-500" />
                      <AlertDescription className="text-green-700">
                        Configuration deployed successfully to {selectedDevice}
                      </AlertDescription>
                    </Alert>
                  )}

                  {deploymentStatus === "failed" && (
                    <Alert className="bg-red-50 border-red-200">
                      <AlertCircle className="h-4 w-4 text-red-500" />
                      <AlertDescription className="text-red-700">
                        Deployment failed. Please check device connectivity and
                        try again.
                      </AlertDescription>
                    </Alert>
                  )}
                </div>
              )}
            </CardContent>
            <CardFooter>
              {validationStatus === "success" &&
                deploymentStatus === "idle" && (
                  <Button
                    onClick={handleDeployConfiguration}
                    disabled={isDeploying}
                    className="w-full"
                  >
                    {isDeploying ? (
                      <span className="flex items-center">
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Deploying...
                      </span>
                    ) : (
                      <span className="flex items-center">
                        <Play className="mr-2 h-4 w-4" />
                        Deploy Configuration
                      </span>
                    )}
                  </Button>
                )}
            </CardFooter>
          </Card>

          {/* AI Agent Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-sm">AI Components</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center space-x-2">
                <Badge variant="outline">LLM (Ollama)</Badge>
                <span className="text-sm text-gray-600">Config Generator</span>
              </div>
              <div className="flex items-center space-x-2">
                <Badge variant="outline">AI Agent (CrewAI)</Badge>
                <span className="text-sm text-gray-600">Validator</span>
              </div>
              <div className="flex items-center space-x-2">
                <Badge variant="outline">Cisco 3725</Badge>
                <span className="text-sm text-gray-600">Target Platform</span>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default GenAIAutomation;
